openapi: '3.1.0'

info:
  version: v2.5.0
  title: Labrinth
  description: |
    **Remember to join our [Discord](https://discord.gg/EUHuJHt) if you need any support!**
    
    ## Authentication
    This API uses GitHub tokens for authentication. The token is in the `Authorization` header of the request.
    
    Example:
    ```
    Authorization: gho_pJ9dGXVKpfzZp4PUHSxYEq9hjk0h288Gwj4S
    ```
    
    You do not need a token for most requests. Generally speaking, only the following types of requests require a token:
    - those which create data (such as version creation)
    - those which modify data (such as editing a project)
    - those which access private data (such as draft projects and notifications)
    
    Applications interacting with the authenticated API should either retrieve the Modrinth GitHub token through the site or create a personal app token for use with Modrinth.
    The API provides a couple routes for auth -- don't implement this flow in your application!
    Instead, use a personal access token or create your own GitHub OAuth2 application.
    This system will be revisited and allow easier interaction with the authenticated subset of the API once we roll out our own authentication system.
    
    ## Cross-Origin Resource Sharing
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with the [W3C spec](https://www.w3.org/TR/cors/).
    This allows for cross-domain communication from the browser.
    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
    
    ## Ratelimits
    The API has a ratelimit defined per IP. Limits and remaining amounts are given in the response headers.
    - `X-Ratelimit-Limit`: the maximum number of requests that can be made in a minute
    - `X-Ratelimit-Remaining`: the number of requests remaining in the current ratelimit window
    - `X-Ratelimit-Reset`: the time in seconds until the ratelimit window resets
    
    Ratelimits are the same no matter whether you use a token or not.
    
    ## User Agents
    To access the Modrinth API, you **must** use provide a uniquely-identifying `User-Agent` header.
    Providing a user agent that only identifies your HTTP client library (such as "okhttp/4.9.3") increases the likelihood that we will block your traffic.
    It is recommended, but not required, to include contact information in your user agent.
    This allows us to contact you if we would like a change in your application's behavior without having to block your traffic.
    - Bad: `User-Agent: okhttp/4.9.3`
    - Good: `User-Agent: my_awesome_launcher`
    - Better: `User-Agent: github_org/my_awesome_launcher/1.56.0`
    - Best: `User-Agent: github_org/my_awesome_launcher/1.56.0 (launcher.com)` or `User-Agent: github_org/my_awesome_launcher/1.56.0 (contact@launcher.com)`
# The above snippet about User Agents was adapted from https://crates.io/policies, copyright (c) 2014 The Rust Project Developers under MIT license

servers:
  - url: https://api.modrinth.com/v2
    description: Production server
  - url: https://staging-api.modrinth.com/v2
    description: Staging server

components:
  parameters:
    ProjectIdentifier: &ProjectIdentifier
      name: id|slug
      in: path
      required: true
      description: The ID or slug of the project
      schema:
        type: string
        example: [AABBCCDD, my_project]
    UserIdentifier: &UserIdentifier
      name: id|username
      in: path
      required: true
      description: The ID or username of the user
      schema:
        type: string
        example: [EEFFGGHH, my_user]
    VersionIdentifier: &VersionIdentifier
      name: id
      in: path
      required: true
      description: The ID of the version
      schema:
        type: string
        example: [IIJJKKLL]
    TeamIdentifier: &TeamIdentifier
      name: id
      in: path
      required: true
      description: The ID of the team
      schema:
        type: string
        example: [MMNNOOPP]
    AlgorithmIdentifier:  &AlgorithmIdentifier
      name: algorithm
      in: query
      required: false
      description: The algorithm of the hash
      schema:
        type: string
        enum: [sha1, sha512]
        example: sha512
        default: sha1
    FileHashIdentifier: &FileHashIdentifier
      name: hash
      in: path
      required: true
      description: The hash of the file, considering its byte content, and encoded in hexadecimal
      schema:
        type: string
        example: 619e250c133106bacc3e3b560839bd4b324dfda8

  schemas:
  # Version
    BaseVersion: &BaseVersion
      type: object
      properties:
        name:
          type: string
          description: The name of this version
          example: "Version 1.0.0"
        version_number:
          type: string
          description: "The version number. Ideally will follow semantic versioning"
          example: "1.0.0"
        changelog:
          type: string
          description: "The changelog for this version"
          example: "List of changes in this version: ..."
          nullable: true
        dependencies:
          type: array
          items:
            type: object
            nullable: true
            properties:
              version_id:
                type: string
                description: The ID of the version that this version depends on
                example: IIJJKKLL
                nullable: true
              project_id:
                type: string
                description: The ID of the project that this version depends on
                example: QQRRSSTT
                nullable: true
              file_name:
                type: string
                description: The file name of the dependency, mostly used for showing external dependencies on modpacks
                example: sodium-fabric-mc1.19-0.4.2+build.16.jar
                nullable: true
              dependency_type:
                type: string
                enum: [required, optional, incompatible, embedded]
                description: The type of dependency that this version has
                example: required
            required:
              - dependency_type
          description: A list of specific versions of projects that this version depends on
        game_versions:
          type: array
          items:
            type: string
          description: A list of versions of Minecraft that this version supports
          example: ["1.16.5", "1.17.1"]
        version_type:
          type: string
          description: The release channel for this version
          enum: [release, beta, alpha]
          example: release
        loaders:
          type: array
          items:
            type: string
          description: The mod loaders that this version supports
          example: ["fabric", "forge"]
        featured:
          type: boolean
          description: Whether the version is featured or not
          example: true
    # https://github.com/modrinth/labrinth/blob/master/src/routes/versions.rs#L169-L190
    EditableVersion: &EditableVersion
      allOf:
        - *BaseVersion
        - type: object
          properties:
            primary_file:
              type: array
              items:
                type: string
              example: [sha1, aaaabbbbccccddddeeeeffffgggghhhhiiiijjjj]
              description: The hash format and the hash of the new primary file
    # https://github.com/modrinth/labrinth/blob/master/src/routes/version_creation.rs#L27-L57
    CreatableVersion: &CreatableVersion
      allOf:
        - *BaseVersion
        - type: object
          properties:
            project_id:
              type: string
              description: The ID of the project this version is for
              example: AABBCCDD
            file_parts:
              type: array
              items:
                type: string
                description: An array of the multipart field names of each file that goes with this version
            primary_file:
              type: string
              description: The multipart field name of the primary file
          required:
            - file_parts
            - project_id
            - name
            - version_number
            - game_versions
            - version_type
            - loaders
            - featured
    Version: &Version
      allOf:
        - *BaseVersion
        - type: object
          properties:
            id:
              type: string
              description: The ID of the version, encoded as a base62 string
              example: IIJJKKLL
            project_id:
              type: string
              description: The ID of the project this version is for
              example: AABBCCDD
            author_id:
              type: string
              description: The ID of the author who published this version
              example: EEFFGGHH
            date_published:
              type: string
              format: ISO-8601
            downloads:
              type: integer
              description: The number of times this version has been downloaded
            changelog_url:
              type: string
              description: A link to the changelog for this version
              deprecated: true
              example: null
              nullable: true
            files:
              type: array
              items:
                type: object
                properties:
                  hashes:
                    type: object
                    properties:
                      sha512:
                        type: string
                        example: 93ecf5fe02914fb53d94aa3d28c1fb562e23985f8e4d48b9038422798618761fe208a31ca9b723667a4e05de0d91a3f86bcd8d018f6a686c39550e21b198d96f
                      sha1:
                        type: string
                        example: c84dd4b3580c02b79958a0590afd5783d80ef504
                    description: A map of hashes of the file. The key is the hashing algorithm and the value is the string version of the hash.
                  url:
                    type: string
                    example: "https://cdn.modrinth.com/data/AABBCCDD/versions/1.0.0/my_file.jar"
                    description: A direct link to the file
                  filename:
                    type: string
                    example: "my_file.jar"
                    description: The name of the file
                  primary:
                    type: boolean
                    example: false
                  size:
                    type: integer
                    example: 1097270
                    description: The size of the file in bytes
                required:
                  - hashes
                  - url
                  - filename
                  - primary
                  - size
              description: A list of files available for download for this version
          required:
            - id
            - project_id
            - author_id
            - date_published
            - downloads
            - files
            - name
            - version_number
            - game_versions
            - version_type
            - loaders
            - featured
    # Project
    # Fields that can be used in everything. Search, direct project lookup, project editing, you name it.
    BaseProject: &BaseProject
      type: object
      properties:
        slug:
          type: string
          description: The slug of a project, used for vanity URLs
          example: my_project
        title:
          type: string
          description: The title or name of the project
          example: My Project
        description:
          type: string
          description: A short description of the project
          example: A short description
        categories:
          type: array
          items:
            type: string
          example: [technology, adventure, fabric]
          description: A list of the categories that the project has
        client_side:
          type: string
          enum: [required, optional, unsupported]
          description: The client side support of the project
          example: required
        server_side:
          type: string
          enum: [required, optional, unsupported]
          description: The server side support of the project
          example: optional
    # Fields added to search results and direct project lookups that cannot be edited.
    ServerRenderedProject: &ServerRenderedProject
      allOf:
        - *BaseProject
        - type: object
          properties:
            project_type:
              type: string
              enum: [mod, modpack, resourcepack]
              description: The project type of the project
              example: mod
            downloads:
              type: integer
              description: The total number of downloads of the project
            icon_url:
              type: string
              example: https://cdn.modrinth.com/data/AABBCCDD/b46513nd83hb4792a9a0e1fn28fgi6090c1842639.png
              description: The URL of the project's icon
              nullable: true
          required:
            - project_type
            - downloads
    # The actual result in search.
    ProjectResult: &ProjectResult
      allOf:
        - *ServerRenderedProject
        - type: object
          properties:
            project_id:
              type: string
              description: The ID of the project
              example: AABBCCDD
            author:
              type: string
              description: The username of the project's author
              example: my_user
            display_categories:
              type: array
              items:
                type: string
              description: A list of the categories that the project has which are not secondary
              example: ["technology", "fabric"]
            versions:
              type: array
              items:
                type: string
              description: A list of the minecraft versions supported by the project
              example: ["1.8", "1.8.9"]
            follows:
              type: integer
              description: The total number of users following the project
            date_created:
              type: string
              format: ISO-8601
              description: The date the project was added to search
            date_modified:
              type: string
              format: ISO-8601
              description: The date the project was last modified
            latest_version:
              type: string
              description: The latest version of minecraft that this project supports
              example: 1.8.9
            license:
              type: string
              description: The license of the project
              example: mit
            gallery:
              type: array
              description: All gallery images attached to the project
              example: [https://cdn.modrinth.com/data/AABBCCDD/images/009b7d8d6e8bf04968a29421117c59b3efe2351a.png, https://cdn.modrinth.com/data/AABBCCDD/images/c21776867afb6046fdc3c21dbcf5cc50ae27a236.png]
              items:
                type: string
          required:
            - slug
            - title
            - description
            - client_side
            - server_side
            - project_id
            - author
            - versions
            - follows
            - date_created
            - date_modified
            - license
    # Fields that appear everywhere EXCEPT search.
    NonSearchProject: &NonSearchProject
      allOf:
        - *BaseProject
        - type: object
          properties:
            body:
              type: string
              description: A long form description of the project
              example: A long body describing my project in detail
            additional_categories:
              type: array
              description: A list of categories which are searchable but non-primary
              example: []
            issues_url:
              type: string
              description: An optional link to where to submit bugs or issues with the project
              example: https://github.com/my_user/my_project/issues
              nullable: true
            source_url:
              type: string
              description: An optional link to the source code of the project
              example: https://github.com/my_user/my_project
              nullable: true
            wiki_url:
              type: string
              description: An optional link to the project's wiki page or other relevant information
              example: https://github.com/my_user/my_project/wiki
              nullable: true
            discord_url:
              type: string
              description: An optional invite link to the project's discord
              example: https://discord.gg/AaBbCcDd
              nullable: true
            donation_urls:
              type: array
              items:
                type: object
                nullable: true
                properties:
                  id:
                    type: string
                    description: The ID of the donation platform
                    example: patreon
                  platform:
                    type: string
                    description: The donation platform this link is to
                    example: Patreon
                  url:
                    type: string
                    description: The URL of the donation platform and user
                    example: https://www.patreon.com/my_user
              description: A list of donation links for the project
    # Fields available only when editing or creating a project
    ModifiableProject: &ModifiableProject
      allOf:
        - *NonSearchProject
        - type: object
          properties:
            license_id:
              type: string
              description: The license ID of a project, retrieved from the license tag route
              example: lgpl-3
            license_url:
              type: string
              description: The URL to this license
              example: https://cdn.modrinth.com/licenses/lgpl-3.txt
              nullable: true
    # Fields that can be edited through a PATCH request. https://github.com/modrinth/labrinth/blob/master/src/routes/projects.rs#L195-L269
    EditableProject: &EditableProject
      allOf:
        - *ModifiableProject
        - type: object
          properties:
            status:
              type: string
              enum: [approved, rejected, draft, unlisted, archived, processing, unknown]
              description: The status of the project
              example: approved
            moderation_message:
              type: string
              description: The title of the moderators' message for the project
              nullable: true
            moderation_message_body:
              type: string
              description: The body of the moderators' message for the project
              nullable: true
    # Fields only available for project creation. https://github.com/modrinth/labrinth/blob/master/src/routes/project_creation.rs#L129-L197
    CreatableProject: &CreatableProject
      allOf:
        - *ModifiableProject
        - type: object
          properties:
            project_type:
              type: string
              enum: [mod, modpack]
              example: modpack
            initial_versions:
              type: array
              items: *EditableVersion
              description: A list of initial versions to upload with the created project (required unless `is_draft` is true)
            is_draft:
              type: boolean
              description: Whether the project should be saved as a draft instead of being sent to moderation for review
              example: true
            gallery_items:
              type: array
              items:
                type: object
                nullable: true
                properties:
                  item:
                    type: string
                    description: The name of the multipart item where the gallery media is located
                  featured:
                    type: boolean
                    description: Whether the image is featured in the gallery
                    example: true
                  title:
                    type: string
                    description: The title of the gallery image
                    example: My awesome screenshot!
                    nullable: true
                  description:
                    type: string
                    description: The description of the gallery image
                    example: This awesome screenshot shows all of the blocks in my mod!
                    nullable: true
          required:
            - project_type
            - slug
            - title
            - description
            - body
            - categories
            - client_side
            - server_side
            - license_id
    Project: &Project
      allOf:
        - *NonSearchProject
        - *ServerRenderedProject
        - type: object
          properties:
            id:
              type: string
              example: AABBCCDD
              description: The ID of the project, encoded as a base62 string
            team:
              type: string
              example: MMNNOOPP
              description: The ID of the team that has ownership of this project
            body_url:
              type: string
              deprecated: true
              default: null
              description: The link to the long description of the project (only present for old projects)
              example: null
              nullable: true
            moderator_message:
              type: object
              properties:
                message:
                  type: string
                  description: The message that a moderator has left for the project
                body:
                  type: string
                  description: The longer body of the message that a moderator has left for the project
                  nullable: true
              nullable: true
              example: null
              description: A message that a moderator sent regarding the project
            published:
              type: string
              format: ISO-8601
              description: The date the project was published
            updated:
              type: string
              format: ISO-8601
              description: The date the project was last updated
            approved:
              type: string
              format: ISO-8601
              description: The date the project's status was set to approved or unlisted
              nullable: true
            followers:
              type: integer
              description: The total number of users following the project
            status:
              type: string
              enum: [approved, rejected, draft, unlisted, archived, processing, unknown]
              description: The status of the project
              example: approved
            license:
              type: object
              properties:
                id:
                  type: string
                  description: The license id of a project, retrieved from the licenses get route
                  example: lgpl-3
                name:
                  type: string
                  description: The long name of a license
                  example: GNU Lesser General Public License v3
                url:
                  type: string
                  description: The URL to this license
                  example: https://cdn.modrinth.com/licenses/lgpl-3.txt
                  nullable: true
              description: The license of the project
            versions:
              type: array
              items:
                type: string
              example: [IIJJKKLL, QQRRSSTT]
              description: A list of the version IDs of the project (will never be empty unless `draft` status)
            gallery:
              type: array
              items:
                type: object
                nullable: true
                properties:
                  url:
                    type: string
                    description: The URL of the gallery image
                    example: https://cdn.modrinth.com/data/AABBCCDD/images/009b7d8d6e8bf04968a29421117c59b3efe2351a.png
                  featured:
                    type: boolean
                    description: Whether the image is featured in the gallery
                    example: true
                  title:
                    type: string
                    description: The title of the gallery image
                    example: My awesome screenshot!
                    nullable: true
                  description:
                    type: string
                    description: The description of the gallery image
                    example: This awesome screenshot shows all of the blocks in my mod!
                    nullable: true
                  created:
                    type: string
                    format: ISO-8601
                    description: The date and time the gallery image was created
                required:
                  - url
                  - featured
                  - created
              description: A list of images that have been uploaded to the project's gallery
          required:
            - id
            - team
            - published
            - updated
            - followers
            - title
            - description
            - categories
            - client_side
            - server_side
            - slug
            - body
            - status
    ProjectDependencyList: &ProjectDependencyList
      type: object
      properties:
        projects:
          type: array
          items: *Project
          description: Projects that the project depends upon
        versions:
          type: array
          items: *Version
          description: Versions that the project depends upon
    # Search
    SearchResults: &SearchResults
      type: object
      properties:
        hits:
          type: array
          items: *ProjectResult
          description: The list of results
        offset:
          type: integer
          description: The number of results that were skipped by the query
          example: 0
        limit:
          type: integer
          description: The number of results that were returned by the query
          example: 10
        total_hits:
          type: integer
          description: The total number of results that match the query
          example: 10
      required:
        - hits
        - offset
        - limit
        - total_hits
    # User
    EditableUser: &EditableUser
      type: object
      properties:
        username:
          type: string
          description: The user's username
          example: my_user
        name:
          type: string
          example: My User
          description: The user's display name
          nullable: true
        email:
          type: string
          format: email
          description: The user's email (only your own is ever displayed)
          nullable: true
        bio:
          type: string
          example: My short biography
          description: A description of the user
      required:
        - username
    User: &User
      allOf:
        - *EditableUser
        - type: object
          properties:
            id:
              type: string
              example: EEFFGGHH
              description: The user's id
            github_id:
              type: integer
              example: 11223344
              description: The user's github id
              nullable: true
            avatar_url:
              type: string
              example: https://avatars.githubusercontent.com/u/11223344?v=1
              description: The user's avatar url
            created:
              type: string
              format: ISO-8601
              description: The time at which the user was created
            role:
              type: string
              enum: [admin, moderator, developer]
              description: The user's role
              example: developer
          required:
            - id
            - avatar_url
            - created
            - role
    # Notifications
    Notification: &Notification
      type: object
      properties:
        id:
          type: string
          description: The id of the notification
          example: UUVVWWXX
        user_id:
          type: string
          description: The id of the user who received the notification
          example: EEFFGGHH
        type:
          type: string
          enum: [project_update, team_invite]
          description: The type of notification
          example: project_update
        title:
          type: string
          description: The title of the notification
          example: "**My Project** has been updated!"
        text:
          type: string
          description: The body text of the notification
          example: "The project, My Project, has released a new version: 1.0.0"
        link:
          type: string
          description: A link to the related project or version
          example: mod/AABBCCDD/version/IIJJKKLL
        read:
          type: boolean
          example: false
          description: Whether the notification has been read or not
        created:
          type: string
          format: ISO-8601
          description: The time at which the notification was created
        actions:
          type: array
          items:
            type: object
            nullable: true
          description: A list of actions that can be performed
      required:
        - id
        - user_id
        - title
        - text
        - link
        - read
        - created
        - actions
    # Reports
    CreatableReport: &CreatableReport
      type: object
      properties:
        report_type:
          type: string
          description: The type of the report being sent
          example: copyright
        item_id:
          type: string
          description: The ID of the item (project, version, or user) being reported
          example: EEFFGGHH
        item_type:
          type: string
          enum: [project, user, version]
          description: The type of the item being reported
          example: project
        body:
          type: string
          description: The extended explanation of the report
          example: This is a reupload of my mod, AABBCCDD!
      required:
        - report_type
        - item_id
        - item_type
        - body
    Report: &Report
      type: object
      allOf:
        - *CreatableReport
        - type: object
          properties:
            reporter:
              type: string
              description: The ID of the user who reported the item
              example: UUVVWWXX
            created:
              type: string
              format: ISO-8601
              description: The time at which the report was created
          required:
            - reporter
            - created
    # Team
    TeamMember: &TeamMember
      type: object
      properties:
        team_id:
          type: string
          example: MMNNOOPP
          description: The ID of the team this team member is a member of
        user: *User
        role:
          type: string
          example: Member
          description: The user's role on the team
        permissions:
          type: integer
          format: bitfield
          example: 127
          description: |
            The user's permissions in bitfield format (requires authorization to view)

            In order from first to eighth bit, the bits are:
            - UPLOAD_VERSION
            - DELETE_VERSION
            - EDIT_DETAILS
            - EDIT_BODY
            - MANAGE_INVITES
            - REMOVE_MEMBER
            - EDIT_MEMBER
            - DELETE_PROJECT
        accepted:
          type: boolean
          example: true
          description: Whether or not the user has accepted to be on the team (requires authorization to view)
      required:
        - team_id
        - user
        - role
        - accepted
    # Tags
    CategoryTag: &CategoryTag
      type: object
      properties:
        icon:
          type: string
          description: The SVG icon of a category
          example: "<svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><polygon points=\"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76\"/></svg>"
        name:
          type: string
          description: The name of the category
          example: "adventure"
        project_type:
          type: string
          description: The project type this category is applicable to
          example: mod
        header:
          type: string
          description: The header under which the category should go
          example: "resolutions"
      required:
        - icon
        - name
        - project_type
        - header
    LoaderTag: &LoaderTag
      type: object
      properties:
        icon:
          type: string
          description: The SVG icon of a loader
          example: "<svg viewBox=\"0 0 276 288\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"23\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><g transform=\"matrix(1,0,0,1,-3302.43,-67.3276)\"><g transform=\"matrix(0.564163,0,0,1.70346,1629.87,0)\"><g transform=\"matrix(1.97801,-0.0501803,0.151517,0.655089,1678.7,-354.14)\"><g><path d=\"M820.011,761.092C798.277,738.875 754.809,694.442 734.36,673.389C729.774,668.668 723.992,663.75 708.535,674.369C688.629,688.043 700.073,696.251 703.288,699.785C711.508,708.824 787.411,788.803 800.523,803.818C802.95,806.597 780.243,781.318 793.957,764.065C799.444,757.163 811.985,752.043 820.011,761.092C826.534,768.447 830.658,779.178 816.559,790.826C791.91,811.191 714.618,873.211 689.659,893.792C677.105,904.144 661.053,896.143 653.827,887.719C646.269,878.908 623.211,853.212 602.539,829.646C596.999,823.332 598.393,810.031 604.753,804.545C639.873,774.253 696.704,730.787 716.673,713.831\"/></g></g></g></g></svg>"
        name:
          type: string
          description: The name of the loader
          example: fabric
        supported_project_types:
          type: array
          items:
            type: string
            description: The project type
          description: The project types that this loader is applicable to
          example: [mod, modpack]
      required:
        - icon
        - name
        - supported_project_types
    GameVersionTag: &GameVersionTag
      type: object
      properties:
        version:
          type: string
          description: The name/number of the game version
          example: 1.18.1
        version_type:
          type: string
          enum: [release, snapshot, alpha, beta]
          description: The type of the game version
          example: release
        date:
          type: string
          format: ISO-8601
          description: The date of the game version release
        major:
          type: boolean
          description: Whether or not this is a major version, used for Featured Versions
          example: true
      required:
        - version
        - version_type
        - date
        - major
    LicenseTag: &LicenseTag
      type: object
      properties:
        short:
          type: string
          description: The short identifier of the license
          example: lgpl-3
        name:
          type: string
          description: The full name of the license
          example: GNU Lesser General Public License v3
      required:
        - short
        - name
    DonationPlatformTag: &DonationPlatformTag
      type: object
      properties:
        short:
          type: string
          description: The short identifier of the donation platform
          example: bmac
        name:
          type: string
          description: The full name of the donation platform
          example: Buy Me a Coffee
      required:
        - short
        - name
    # Errors
    InvalidInputError: &InvalidInputError
      type: object
      properties:
        error:
          type: string
          description: The name of the error
          example: "invalid_input"
        description:
          type: string
          description: The contents of the error
          example: "Error while parsing multipart payload"
      required:
        - error
        - description
    AuthError: &AuthError
      type: object
      properties:
        error:
          type: string
          description: The name of the error
          example: "unauthorized"
        description:
          type: string
          description: The contents of the error
          example: "Authentication Error: Invalid Authentication Credentials"
      required:
        - error
        - description
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization

tags:
  - name: projects
    x-displayName: Projects
    description: Projects can be mods or modpacks and are created by users.
  - name: versions
    x-displayName: Versions
    description: Versions contain download links to files with additional metadata.
  - name: version-files
    x-displayName: Version Files
    description: Versions can contain multiple files, and these routes help manage those files.
  - name: users
    x-displayName: Users
    description: Users can create projects, join teams, access notifications, manage settings, and follow projects. Admins and moderators have more advanced permissions such as reviewing new projects.
  - name: teams
    x-displayName: Teams
    description: Through teams, user permissions limit how team members can modify projects.
  - name: tags
    x-displayName: Tags
    description: Tags are common and reusable lists of metadata types such as categories or versions. Some can be applied to projects and/or versions.
  - name: auth
    x-displayName: Authorization
  - name: project_model
    x-displayName: Project Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Project" />
  - name: project_result_model
    x-displayName: Search Result Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ProjectResult" />
  - name: version_model
    x-displayName: Version Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Version" />
  - name: user_model
    x-displayName: User Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/User" />
  - name: team_member_model
    x-displayName: Team Member Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TeamMember" />

x-tagGroups:
  - name: General
    tags:
      - projects
      - versions
      - version-files
      - users
      - teams
      - tags
  - name: Models
    tags:
      - project_model
      - project_result_model
      - version_model
      - user_model
      - team_member_model

paths:
  # Project
  /search:
    get:
      summary: Search projects
      operationId: searchProjects
      parameters:
        - in: query
          name: query
          schema:
            type: string
            example: gravestones
          description: The query to search for
        - in: query
          name: facets
          schema:
            type: array
            items:
              type: array
              items:
                type: string
          example: "[[\"categories:forge\"],[\"versions:1.17.1\"],[\"project_type:mod\"],[\"license:mit\"]]"
          description: The recommended way of filtering search results. [Learn more about using facets.](/docs/tutorials/api_search)
        - in: query
          name: index
          schema:
            type: string
            enum:
              - relevance
              - downloads
              - follows
              - newest
              - updated
            default: relevance
            example: downloads
          description: The sorting method used for sorting search results
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            example: 20
          description: The offset into the search. Skips this number of results
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            example: 20
          description: The number of results returned by the search
        - in: query
          name: filters
          schema:
            type: string
            example: categories="fabric" AND (categories="technology" OR categories="utility")
          description: A list of filters relating to the properties of a project. Use filters when there isn't an available facet for your needs. [More information](https://docs.meilisearch.com/reference/features/filtering.html)
        - in: query
          name: version
          schema:
            type: string
            example: version="1.16.3" OR version="1.16.2" OR version="1.16.1"
          deprecated: true
          description: A list of filters relating to the versions of a project. Use of facets for filtering by version is recommended
      tags:
        - projects
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema: *SearchResults
        "400":
          description: Invalid request
          content:
            application/json:
              schema: *InvalidInputError
  /project/{id|slug}:
    get:
      summary: Get a project
      operationId: getProject
      tags:
        - projects
      parameters:
        - *ProjectIdentifier
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema: *Project
        "404":
          description: The requested project was not found or no authorization to see this project
    patch:
      summary: Modify a project
      operationId: modifyProject
      tags:
        - projects
      security:
        - TokenAuth: []
      parameters:
        - *ProjectIdentifier
      requestBody:
        description: "Modified project fields"
        content:
          application/json:
            schema: *EditableProject
      responses:
        "204":
          description: Project modified successfully
        "401":
          description: No authorization to edit this project
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested project was not found or no authorization to see this project
    delete:
      summary: Delete a project
      operationId: deleteProject
      tags:
        - projects
      security:
        - TokenAuth: []
      parameters:
        - *ProjectIdentifier
      responses:
        "204":
          description: Project deleted successfully
        "400":
          description: The requested project was not found
          content:
            application/json:
              schema: *InvalidInputError
        "401":
          description: No valid authorization to delete this project
          content:
            application/json:
              schema: *AuthError
  /projects:
    get:
      summary: Get multiple projects
      operationId: getProjects
      tags:
        - projects
      parameters:
        - in: query
          name: ids
          description: The IDs of the projects
          schema:
            type: array
            items:
              type: string
            example: "[\"AABBCCDD\", \"EEFFGGHH\"]"
          required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items: *Project
  /project:
    post:
      summary: Create a project
      operationId: createProject
      tags:
        - projects
      security:
        - TokenAuth: []
      requestBody:
        description: "New project"
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data: *CreatableProject
                icon:
                  type: string
                  format: binary
                  enum: ["*.png", "*.jpg", "*.jpeg", "*.bmp", "*.gif", "*.webp", "*.svg", "*.svgz", "*.rgb"]
                  description: Project icon file
              patternProperties:
                '^gallery-[0-9]+$':
                  type: string
                  format: binary
                  enum: ["*.png", "*.jpg", "*.jpeg", "*.bmp", "*.gif", "*.webp", "*.svg", "*.svgz", "*.rgb"]
                  description: A project gallery image file
                '^version-[0-9]+-[0-9]+$':
                  type: string
                  description: A version file
              required: [data]
      responses:
        "200":
          description: Project successfully created
          content:
            application/json:
              schema: *Project
        "400":
          description: Invalid request
          content:
            application/json:
              schema: *InvalidInputError
        "401":
          description: No authorization to create a project
          content:
            application/json:
              schema: *AuthError
  /project/{id|slug}/check:
    get:
      summary: Check project slug/ID validity
      operationId: checkProjectValidity
      tags:
        - projects
      parameters:
        - *ProjectIdentifier
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: AABBCCDD
        "404":
          description: The requested project was not found
  /project/{id|slug}/gallery:
    post:
      summary: Add a gallery image
      description: Modrinth allows you to upload files of up to 5MiB to a project's gallery.
      operationId: addGalleryImage
      tags:
        - projects
      security:
        - TokenAuth: []
      parameters:
        - *ProjectIdentifier
        - description: Image extension
          in: query
          name: ext
          required: true
          schema:
            type: string
            enum: [png, jpg, jpeg, bmp, gif, webp, svg, svgz, rgb]
        - description: Whether an image is featured
          in: query
          name: featured
          required: true
          schema:
            type: boolean
        - description: Title of the image
          in: query
          name: title
          schema:
            type: string
        - description: Description of the image
          in: query
          name: description
          schema:
            type: string
      requestBody:
        description: New gallery image
        content:
          image/*:
            schema:
              type: string
              format: binary
            encoding:
              image:
                contentType: image/png, image/jpeg, image/bmp, image/gif, image/webp, image/svg, image/svgz, image/rgb
      responses:
        "204":
          description: Gallery image successfully created
        "400":
          description: Invalid request
          content:
            application/json:
              schema: *InvalidInputError
        "401":
          description: No authorization to create a gallery image
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested project was not found or no authorization to see this project
    patch:
      summary: Modify a gallery image
      operationId: modifyGalleryImage
      tags:
        - projects
      security:
        - TokenAuth: []
      parameters:
        - *ProjectIdentifier
        - description: URL link of the image to modify
          in: query
          name: url
          required: true
          schema:
            type: string
            format: uri
        - description: Whether the image is featured
          in: query
          name: featured
          required: true
          schema:
            type: boolean
        - description: New title of the image
          in: query
          name: title
          schema:
            type: string
        - description: New description of the image
          in: query
          name: description
          schema:
            type: string
      responses:
        "204":
          description: Gallery image modified successfully
        "401":
          description: No authorization to edit this gallery image
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested project was not found or no authorization to see this project
    delete:
      summary: Delete a gallery image
      operationId: deleteGalleryImage
      tags:
        - projects
      security:
        - TokenAuth: []
      parameters:
        - *ProjectIdentifier
        - description: URL link of the image to delete
          in: query
          name: url
          required: true
          schema:
            type: string
            format: uri
      responses:
        "204":
          description: Gallery image deleted successfully
        "400":
          description: Invalid URL or project specified
          content:
            application/json:
              schema: *InvalidInputError
        "401":
          description: No authorization to delete this gallery image
          content:
            application/json:
              schema: *AuthError
  /project/{id|slug}/dependencies:
    get:
      summary: Get all of a project's dependencies
      operationId: getDependencies
      tags:
        - projects
      parameters:
        - *ProjectIdentifier
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema: *ProjectDependencyList
        "404":
          description: The requested project was not found or no authorization to see this project
  /project/{id|slug}/follow:
    post:
      summary: Follow a project
      operationId: followProject
      tags:
        - projects
      security:
        - TokenAuth: []
      parameters:
        - *ProjectIdentifier
      responses:
        "204":
          description: Expected response to a valid request
        "400":
          description: You are already following the specified project or the requested project was not found
          content:
            application/json:
              schema: *InvalidInputError
        "401":
          description: No authorization to follow a project
          content:
            application/json:
              schema: *AuthError
    delete:
      summary: Unfollow a project
      operationId: unfollowProject
      tags:
        - projects
      security:
        - TokenAuth: []
      parameters:
        - *ProjectIdentifier
      responses:
        "204":
          description: Expected response to a valid request
        "400":
          description: You are not following the specified project or the requested project was not found
          content:
            application/json:
              schema: *InvalidInputError
        "401":
          description: No authorization to unfollow a project
          content:
            application/json:
              schema: *AuthError
  # Version
  /project/{id|slug}/version:
    get:
      summary: List project's versions
      operationId: getProjectVersions
      tags:
        - versions
      parameters:
        - *ProjectIdentifier
        - in: query
          name: loaders
          required: false
          description: "The types of loaders to filter for"
          schema:
            type: array
            items:
              type: string
            example: "[\"fabric\"]"
        - in: query
          name: game_versions
          required: false
          description: "The game versions to filter for"
          schema:
            type: array
            items:
              type: string
            example: "[\"1.18.1\"]"
        - in: query
          name: featured
          required: false
          description: "Allows to filter for featured or non-featured versions only"
          schema:
            type: boolean
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items: *Version
        "404":
          description: The requested project was not found or no authorization to see this project
  /version/{id}:
    get:
      summary: Get a version
      operationId: getVersion
      tags:
        - versions
      parameters:
        - *VersionIdentifier
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema: *Version
        "404":
          description: The requested version was not found or no authorization to see this version
    patch:
      summary: Modify a version
      operationId: modifyVersion
      tags:
        - versions
      security:
        - TokenAuth: []
      parameters:
        - *VersionIdentifier
      requestBody:
        description: "Modified version fields"
        content:
          application/json:
            schema: *EditableVersion
      responses:
        "204":
          description: Version modified successfully
        "401":
          description: No authorization to edit this version
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested version was not found or no authorization to see this version
    delete:
      summary: Delete a version
      operationId: deleteVersion
      tags:
        - versions
      security:
        - TokenAuth: []
      parameters:
        - *VersionIdentifier
      responses:
        "204":
          description: Version deleted successfully
        "401":
          description: No authorization to delete this version
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested version was not found or no authorization to see this version
  /version:
    post:
      summary: Create a version
      description: Project files are attached. `.mrpack` and `.jar` files are accepted.
      operationId: createVersion
      tags:
        - versions
      security:
        - TokenAuth: []
      requestBody:
        description: "New version"
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data: *CreatableVersion
              required: [data]
      responses:
        "200":
          description: Version successfully created
          content:
            application/json:
              schema: *Version
        "400":
          description: Invalid request
          content:
            application/json:
              schema: *InvalidInputError
        "401":
          description: No authorization to create this version
          content:
            application/json:
              schema: *AuthError
  /versions:
    get:
      summary: Get multiple versions
      operationId: getVersions
      tags:
        - versions
      parameters:
        - in: query
          name: ids
          description: The IDs of the versions
          schema:
            type: array
            items:
              type: string
            example: "[\"AABBCCDD\", \"EEFFGGHH\"]"
          required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items: *Version
  /version/{id}/file:
    post:
      summary: Add files to version
      description: Project files are attached. `.mrpack` and `.jar` files are accepted.
      operationId: addFilesToVersion
      tags:
        - versions
      security:
        - TokenAuth: []
      parameters:
        - *VersionIdentifier
      requestBody:
        description: "New version files"
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: object
                  enum:
                    - { }
      responses:
        "204":
          description: Version modified successfully
        "401":
          description: No authorization to modify this version
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested version was not found or no authorization to see this version
  # Version file
  /version_file/{hash}:
    get:
      summary: Get version from hash
      operationId: versionFromHash
      tags:
        - version-files
      parameters:
        - *FileHashIdentifier
        - <<: *AlgorithmIdentifier
          required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema: *Version
        "404":
          description: The requested version file was not found or no authorization to see this version
    delete:
      summary: Delete a file from its hash
      operationId: deleteFileFromHash
      tags:
        - version-files
      security:
        - TokenAuth: []
      parameters:
        - *FileHashIdentifier
        - <<: *AlgorithmIdentifier
          required: true
      responses:
        "204":
          description: Expected response to a valid request
        "401":
          description: No authorization to delete this version
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested version was not found
  /version_file/{hash}/update:
    post:
      summary: Latest version of a project from a hash, loader(s), and game version(s)
      operationId: getLatestVersionFromHash
      tags:
        - version-files
      parameters:
        - *FileHashIdentifier
        - <<: *AlgorithmIdentifier
          required: true
      requestBody:
        description: Parameters of the updated version requested
        content:
          application/json:
            schema:
              type: object
              properties:
                loaders:
                  type: array
                  items:
                    type: string
                    example: [fabric]
                game_versions:
                  type: array
                  items:
                    type: string
                  example: ["1.18", 1.18.1]
              required:
                - loaders
                - game_versions
      responses:
        "200":
          description: Latest version retrieved successfully
          content:
            application/json:
              schema: *Version
        "400":
          description: Input is invalid
        "404":
          description: The requested version was not found or no authorization to see this version
  /version_files:
    post:
      summary: Get versions from hashes
      description: This is the same as [`/version_file/{hash}`](#operation/versionFromHash) except it accepts multiple hashes.
      operationId: versionsFromHashes
      tags:
        - version-files
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  your_hash_here: *Version
        "400":
          description: Input is invalid
      requestBody:
        description: Hashes and algorithm of the versions requested
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: array
                  items:
                    type: string
                  example: [ea0f38408102e4d2efd53c2cc11b88b711996b48d8922f76ea6abf731219c5bd1efe39ddf9cce77c54d49a62ff10fb685c00d2e4c524ab99d20f6296677ab2c4, 925a5c4899affa4098d997dfa4a4cb52c636d539e94bc489d1fa034218cb96819a70eb8b01647a39316a59fcfe223c1a8c05ed2e2ae5f4c1e75fa48f6af1c960]
                algorithm:
                  type: string
                  enum: [ sha1, sha512 ]
                  example: sha512
              required:
                - hashes
                - algorithm
  /version_files/update:
    post:
      summary: Latest versions of multiple project from hashes, loader(s), and game version(s)
      description: This is the same as [`/version_file/{hash}/update`](#operation/getLatestVersionFromHash) except it accepts multiple hashes.
      operationId: getLatestVersionsFromHashes
      tags:
        - version-files
      requestBody:
        description: Parameters of the updated version requested
        content:
          application/json:
            schema:
              type: object
              properties:
                hashes:
                  type: array
                  items:
                    type: string
                  example: [ea0f38408102e4d2efd53c2cc11b88b711996b48d8922f76ea6abf731219c5bd1efe39ddf9cce77c54d49a62ff10fb685c00d2e4c524ab99d20f6296677ab2c4, 925a5c4899affa4098d997dfa4a4cb52c636d539e94bc489d1fa034218cb96819a70eb8b01647a39316a59fcfe223c1a8c05ed2e2ae5f4c1e75fa48f6af1c960]
                algorithm:
                  type: string
                  enum: [sha1, sha512]
                  example: sha512
                loaders:
                  type: array
                  items:
                    type: string
                  example: [fabric]
                game_versions:
                  type: array
                  items:
                    type: string
                  example: ["1.18", 1.18.1]
              required:
                - hashes
                - algorithm
                - loaders
                - game_versions
      responses:
        "200":
          description: Latest versions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  your_hash_here: *Version
        "400":
          description: Input is invalid
  # User
  /user/{id|username}:
    get:
      summary: Get a user
      operationId: getUser
      tags:
        - users
      parameters:
        - *UserIdentifier
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema: *User
        "404":
          description: The requested user was not found
    patch:
      summary: Modify a user
      operationId: modifyUser
      tags:
        - users
      security:
        - TokenAuth: []
      parameters:
        - *UserIdentifier
      requestBody:
        description: "Modified user fields"
        content:
          application/json:
            schema: *EditableUser
      responses:
        "204":
          description: User modified successfully
        "401":
          description: No authorization to modify this user
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested user was not found
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - users
      security:
        - TokenAuth: []
      parameters:
        - *UserIdentifier
      responses:
        "204":
          description: User deleted successfully
        "401":
          description: No authorization to delete this user
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested user was not found
  /user:
    get:
      summary: Get user from authorization header
      operationId: getUserFromAuth
      tags:
        - users
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema: *User
        "401":
          description: No authorization token given
          content:
            application/json:
              schema: *AuthError
  /users:
    get:
      summary: Get multiple users
      operationId: getUsers
      tags:
        - users
      parameters:
        - in: query
          name: ids
          description: The IDs of the users
          schema:
            type: array
            items:
              type: string
            example: "[\"AABBCCDD\", \"EEFFGGHH\"]"
          required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items: *User
  /user/{id|username}/icon:
    patch:
      summary: Change user's avatar
      description: By default, Modrinth uses a user's GitHub icon. This route allows it to be changed to a custom one. The new avatar may be up to 2MiB in size.
      operationId: changeUserIcon
      tags:
        - users
      parameters:
        - *UserIdentifier
      requestBody:
        content:
          multipart/form-data:
            schema:
              enum:
                - { }
            encoding:
              icon:
                contentType: image/png, image/jpeg, image/bmp, image/gif, image/webp, image/svg, image/svgz, image/rgb
      security:
        - TokenAuth: []
      responses:
        "204":
          description: Avatar changed successfully
        "400":
          description: Invalid format for new icon
          content:
            application/json:
              schema: *InvalidInputError
        "404":
          description: The requested user was not found
  /user/{id|username}/projects:
    get:
      summary: Get user's projects
      operationId: getUserProjects
      tags:
        - users
      parameters:
        - *UserIdentifier
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items: *Project
        "404":
          description: The requested user was not found
  /user/{id|username}/notifications:
    get:
      summary: Get user's notifications
      description: Notifications can be project updates or team invites
      operationId: getNotifications
      tags:
        - users
      security:
        - TokenAuth: []
      parameters:
        - *UserIdentifier
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items: *Notification
        "401":
          description: No authorization to get this user's notifications
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested user was not found
  /user/{id|username}/follows:
    get:
      summary: Get user's followed projects
      operationId: getFollowedProjects
      tags:
        - users
      security:
        - TokenAuth: []
      parameters:
        - *UserIdentifier
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items: *Project
        "401":
          description: No authorization to get this user's followed projects
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested user was not found
  /report:
    post:
      summary: Report a project, user, or version
      description: Bring a project, user, or version to the attention of the moderators by reporting it. You must be logged in to report anything.
      operationId: submitReport
      tags:
        - users
      security:
        - TokenAuth: []
      requestBody:
        description: The report to be sent
        content:
          application/json:
            schema: *CreatableReport
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema: *Report
        "400":
          description: Invalid request
          content:
            application/json:
              schema: *InvalidInputError
        "401":
          description: No authorization to submit a report
          content:
            application/json:
              schema: *AuthError
    get:
      summary: Get reports
      operationId: getReports
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items: *Report
  # Teams
  /project/{id|slug}/members:
    get:
      summary: Get a project's team members
      operationId: getProjectTeamMembers
      tags:
        - teams
      parameters:
        - *ProjectIdentifier
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items: *TeamMember
                description: An array of team members
        "404":
          description: The requested project was not found or no authorization to see this project
  /team/{id}/members:
    get:
      summary: Get a team's members
      operationId: getTeamMembers
      tags:
        - teams
      security:
        - TokenAuth: []
      parameters:
        - *TeamIdentifier
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items: *TeamMember
                description: An array of team members
    post:
      summary: Add a user to a team
      operationId: addTeamMember
      tags:
        - teams
      security:
        - TokenAuth: []
      parameters:
        - *TeamIdentifier
      requestBody:
        description: User to be added (must be the ID, usernames cannot be used here)
        content:
          application/json:
            schema:
              properties:
                user_id:
                  type: string
                  example: EEFFGGHH
              required:
                - user_id
      responses:
        "204":
          description: User has been successfully invited to the team
        "401":
          description: No authorization to modify this team
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested team was not found
  /teams:
    get:
      summary: Get the members of multiple teams
      operationId: getTeams
      tags:
        - teams
      parameters:
        - in: query
          name: ids
          description: The IDs of the teams
          schema:
            type: array
            items:
              type: string
            example: "[\"AABBCCDD\", \"EEFFGGHH\"]"
          required: true
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items: *TeamMember

  /team/{id}/join:
    post:
      summary: Join a team
      operationId: joinTeam
      tags:
        - teams
      security:
        - TokenAuth: []
      parameters:
        - *TeamIdentifier
      responses:
        "204":
          description: Team has successfully been joined
        "401":
          description: No authorization to join this team
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested team was not found
  /team/{team_id}/members/{user_id}:
    patch:
      summary: Modify a team member's roles and/or permissions
      operationId: modifyTeamMember
      tags:
        - teams
      security:
        - TokenAuth: []
      parameters:
        - *TeamIdentifier
        - in: path
          name: user_id
          description: The ID of the user to modify
          required: true
          schema:
            type: string
      requestBody:
        description: Contents to be modified
        content:
          application/json:
            schema:
              properties:
                role:
                  type: string
                  example: Contributor
                permissions:
                  type: integer
                  format: bitfield
                  example: 127
                  description: |
                    The user's permissions in bitfield format

                    In order from first to eighth bit, the bits are:
                    - UPLOAD_VERSION
                    - DELETE_VERSION
                    - EDIT_DETAILS
                    - EDIT_BODY
                    - MANAGE_INVITES
                    - REMOVE_MEMBER
                    - EDIT_MEMBER
                    - DELETE_PROJECT
      responses:
        "204":
          description: Roles/permissions have been updated successfully
        "401":
          description: No authorization to change this member's roles/permissions
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested team was not found
    delete:
      summary: Remove a member from a team
      operationId: deleteTeamMember
      tags:
        - teams
      security:
        - TokenAuth: []
      parameters:
        - *TeamIdentifier
        - *UserIdentifier
      responses:
        "204":
          description: User has been removed from the team successfully
        "401":
          description: No authorization to remove this member from the team
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested team was not found
  /team/{id}/owner:
    post:
      summary: Transfer team's ownership to another user
      operationId: transferTeamOwnership
      tags:
        - teams
      security:
        - TokenAuth: []
      parameters:
        - *TeamIdentifier
      requestBody:
        description: New owner's ID
        content:
          application/json:
            schema:
              properties:
                user_id:
                  type: string
                  example: EEFFGGHH
              required:
                - user_id
      responses:
        "204":
          description: Ownership has successfully been transferred
        "401":
          description: No authorization to transfer ownership of this team
          content:
            application/json:
              schema: *AuthError
        "404":
          description: The requested team was not found
  # Tags
  /tag/category:
    get:
      summary: Get a list of categories
      description: Gets an array of categories, their icons, and applicable project types
      operationId: categoryList
      tags:
        - tags
      responses:
        "200":
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items: *CategoryTag
  /tag/loader:
    get:
      summary: Get a list of loaders
      description: Gets an array of loaders, their icons, and supported project types
      operationId: loaderList
      tags:
        - tags
      responses:
        "200":
          description: List of loaders
          content:
            application/json:
              schema:
                type: array
                items: *LoaderTag
  /tag/game_version:
    get:
      summary: Get a list of game versions
      description: Gets an array of game versions and information about them
      operationId: versionList
      tags:
        - tags
      responses:
        "200":
          description: List of game versions
          content:
            application/json:
              schema:
                type: array
                items: *GameVersionTag
  /tag/license:
    get:
      summary: Get a list of licenses
      description: Gets an array of licenses and information about them
      operationId: licenseList
      tags:
        - tags
      responses:
        "200":
          description: List of licenses
          content:
            application/json:
              schema:
                type: array
                items: *LicenseTag
  /tag/donation_platform:
    get:
      summary: Get a list of donation platforms
      description: Gets an array of donation platforms and information about them
      operationId: donationPlatformList
      tags:
        - tags
      responses:
        "200":
          description: List of donation platforms
          content:
            application/json:
              schema:
                type: array
                items: *DonationPlatformTag
  /tag/report_type:
    get:
      summary: Get a list of report types
      description: Gets an array of valid report types
      operationId: reportTypeList
      tags:
        - tags
      responses:
        "200":
          description: List of report types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: [ spam, copyright, inappropriate, malicious, name-squatting, other ]
  # Moderation
  /moderation/projects:
    get:
      summary: Get a list of processing projects
      operationId: getModerationProjects
      security:
        - TokenAuth: []
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items: *Project
